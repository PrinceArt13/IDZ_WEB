//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IDZ_WEB.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SupermarketEntities : DbContext
    {
        public SupermarketEntities()
            : base("name=SupermarketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<cashiers> cashiers { get; set; }
        public virtual DbSet<categories> categories { get; set; }
        public virtual DbSet<discount_cards> discount_cards { get; set; }
        public virtual DbSet<manufacturers> manufacturers { get; set; }
        public virtual DbSet<price_change> price_change { get; set; }
        public virtual DbSet<products> products { get; set; }
        public virtual DbSet<purchase> purchase { get; set; }
        public virtual DbSet<purchase_item> purchase_item { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<cheque> cheque { get; set; }
    
        public virtual int AddProduct(string productName, string category, Nullable<int> price, string manufacturer)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("manufacturer", manufacturer) :
                new ObjectParameter("manufacturer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct", productNameParameter, categoryParameter, priceParameter, manufacturerParameter);
        }
    }
}
